//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.04.10 at 05:00:27 PM CEST 
//


package generatedXmlClasses;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for stApproachLights.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="stApproachLights">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="NONE"/>
 *     &lt;enumeration value="ALSF1"/>
 *     &lt;enumeration value="ALSF2"/>
 *     &lt;enumeration value="CALVERT"/>
 *     &lt;enumeration value="CALVERT2"/>
 *     &lt;enumeration value="MALS"/>
 *     &lt;enumeration value="MALSF"/>
 *     &lt;enumeration value="MALSR"/>
 *     &lt;enumeration value="ODALS"/>
 *     &lt;enumeration value="RAIL"/>
 *     &lt;enumeration value="SALS"/>
 *     &lt;enumeration value="SALSF"/>
 *     &lt;enumeration value="SSALF"/>
 *     &lt;enumeration value="SSALR"/>
 *     &lt;enumeration value="SSALS"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "stApproachLights")
@XmlEnum
public enum StApproachLights {

    NONE("NONE"),
    @XmlEnumValue("ALSF1")
    ALSF_1("ALSF1"),
    @XmlEnumValue("ALSF2")
    ALSF_2("ALSF2"),
    CALVERT("CALVERT"),
    @XmlEnumValue("CALVERT2")
    CALVERT_2("CALVERT2"),
    MALS("MALS"),
    MALSF("MALSF"),
    MALSR("MALSR"),
    ODALS("ODALS"),
    RAIL("RAIL"),
    SALS("SALS"),
    SALSF("SALSF"),
    SSALF("SSALF"),
    SSALR("SSALR"),
    SSALS("SSALS");
    private final String value;

    StApproachLights(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static StApproachLights fromValue(String v) {
        for (StApproachLights c: StApproachLights.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
